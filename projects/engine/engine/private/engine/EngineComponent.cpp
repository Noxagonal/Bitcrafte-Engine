
#include <engine/PreCompiledHeader.hpp>

#include <engine/EngineComponent.hpp>
#include <engine/EngineComponentStartInfo.hpp>

#include <core/CoreComponent.hpp>
#include <rhi/RHIComponent.hpp>
#include <window_manager/WindowManagerComponent.hpp>

#include <core/diagnostic/logger/Logger.hpp>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bc::engine::EngineComponent * global_engine = nullptr;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bc::engine::EngineComponent::EngineComponent( const EngineComponentCreateInfo & create_info )
	:
	create_info_copy( create_info )
{
	global_engine = this;

	window_manager_component	= window_manager::CreateWindowManagerComponent( create_info.window_manager_create_info );
	rhi_component				= rhi::CreateRHIComponent( *window_manager_component, create_info.rhi_create_info );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bc::engine::EngineComponent::~EngineComponent()
{
	rhi_component				= nullptr;
	window_manager_component	= nullptr;

	global_engine				= nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::engine::EngineComponent::Start( const EngineComponentStartInfo & engine_start_info )
{
	rhi_component->Start( engine_start_info.rhi_start_info );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::engine::EngineComponent::Run()
{
	window_manager_component->Run();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto bc::engine::EngineComponent::GetWindowManagerComponent() -> window_manager::WindowManagerComponent*
{
	return window_manager_component.Get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto bc::engine::EngineComponent::GetRHIComponent() -> rhi::RHIComponent*
{
	return rhi_component.Get();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto bc::engine::GetEngine() -> bc::engine::EngineComponent*
{
	return global_engine;
}
