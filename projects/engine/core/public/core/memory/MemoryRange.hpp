#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <core/data_types/FundamentalTypes.hpp>



namespace bc {
namespace memory {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief
/// A range of memory of a specific type.
///
/// This is meant to be a simple and fast container for memory ranges, useful when you need to return a range, or when iterating
/// over a range.
///
/// @tparam Type
/// The type of the elements in the range.
///
/// @tparam IsConst
/// Whether the elements can be modified.
template<typename Type, bool IsConst = true>
class MemoryRange
{
public:

	using PointerType = std::conditional_t<IsConst, const Type*, Type*>;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr MemoryRange() noexcept = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr MemoryRange( PointerType data, i64 size ) noexcept:
		data( data ),
		size( size )
	{}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto operator=( const MemoryRange& other ) noexcept -> MemoryRange&
	{
		this->data = other.data;
		this->size = other.size;
		return *this;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto Data() const noexcept -> PointerType
	{
		return this->data;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto Data() noexcept -> PointerType requires( !IsConst )
	{
		return this->data;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto Size() const noexcept -> u64
	{
		return this->size;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto GetByteSize() const noexcept -> u64
	{
		return this->size * sizeof( Type );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto GetAlignment() const noexcept -> u64
	{
		return alignof( Type );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto begin() const noexcept -> PointerType
	{
		return this->data;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto begin() noexcept -> PointerType
	{
		return this->data;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto cbegin() const noexcept -> PointerType
	{
		return begin();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto end() const noexcept -> PointerType
	{
		return this->data + this->size;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto end() noexcept -> PointerType
	{
		return this->data + this->size;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr auto cend() const noexcept -> PointerType
	{
		return end();
	}

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PointerType		data	= nullptr;
	i64				size	= 0;
};



} // namespace memory
} // namespace bc
