#pragma once

#include <core/diagnostic/logger/LogReportSeverity.hpp>
#include <core/memory/HeapMemoryBlock.hpp>
#include <core/memory/MemoryRange.hpp>

#include "LoggerCreateInfo.hpp"
#include "LogEntry.hpp"

#include <mutex>



namespace bc {
namespace diagnostic {



class Exception;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief
/// Class that keeps a list of reports in memory.
class BITCRAFTE_ENGINE_API Logger
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Logger( const LoggerCreateInfo& logger_create_info ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~Logger() noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void LogVerbose( const PrintRecord&	message ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void LogInfo( const PrintRecord& message ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void LogPerformanceWarning( const PrintRecord& message ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void LogWarning( const PrintRecord& message ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void LogError( const PrintRecord& message ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void LogCriticalError( const PrintRecord& message ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void LogDebug( const PrintRecord& message ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Log(
		LogReportSeverity	report_severity,
		const PrintRecord&	message
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Log(
		LogReportSeverity	report_severity,
		const Exception&	exception
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto GetLogHistory() const noexcept -> memory::MemoryRange<LogEntry>;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void PushLogEntry( const LogEntry& log_entry ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddLogEntryToHistory( const LogEntry& log_entry ) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void CopyConstructHistoryLogEntry( i64 at_index, const LogEntry& log_entry ) noexcept;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void MoveConstructHistoryLogEntry( i64 at_index, LogEntry&& log_entry ) noexcept;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void DestructHistoryLogEntry( i64 at_index ) noexcept;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void DestructAllHistoryLogEntries() noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::mutex							log_mutex;
	LoggerCreateInfo					create_info			= {};

	i64 								log_recorded_total	= {};
	i64 								log_history_size	= {};
	memory::HeapMemoryBlock<LogEntry>	log_history			= {};
};



} // diagnostic
} // bc
