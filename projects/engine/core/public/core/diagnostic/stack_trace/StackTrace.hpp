#pragma once

#include "StackTraceFrame.hpp"
#include <core/containers/simple/SimpleList.hpp>



namespace bc {
namespace diagnostic {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class BITCRAFTE_ENGINE_API StackTrace
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr StackTrace() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr StackTrace(
		const StackTrace										&	other
	) = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr StackTrace(
		StackTrace												&&	other
	) = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr StackTrace										&	operator=(
		const StackTrace										&	other
	) = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	constexpr StackTrace										&	operator=(
		StackTrace												&&	other
	) = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief
	/// Gets the stack trace to where this function was called.
	///
	/// @param leaf_calls_to_ignore
	/// How many functions to skip from the stack trace, this is useful when we want to ignore helper functions and other locations
	/// that are always part of the stack trace. By default, calling this function already skips the trace to this function, value
	/// of 1 will skip including the trace to the function that called this function and so on.
	///
	/// @return
	/// New stack trace to this location.
	static inline constexpr StackTrace								Current(
		size_t														leaf_calls_to_ignore				= 0
	)
	{
		// TODO
		return {};
	}

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	SimpleList<StackTraceFrame>										frame_list;
};



} // diagnostic
} // bc
