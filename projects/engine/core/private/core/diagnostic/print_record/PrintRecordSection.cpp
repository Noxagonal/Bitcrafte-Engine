
#include <core/PreCompiledHeader.hpp>
#include <core/diagnostic/print_record/PrintRecordSection.hpp>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bc::diagnostic::PrintRecordSection::PrintRecordSection( const PrintRecordSection& other ) noexcept
{
	Copy( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bc::diagnostic::PrintRecordSection::PrintRecordSection( PrintRecordSection&& other ) noexcept
{
	Swap( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bc::diagnostic::PrintRecordSection::~PrintRecordSection() noexcept
{
	Clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto bc::diagnostic::PrintRecordSection::operator=( const PrintRecordSection& other ) noexcept -> PrintRecordSection &
{
	Copy( other );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto bc::diagnostic::PrintRecordSection::operator=( PrintRecordSection&& other ) noexcept -> PrintRecordSection &
{
	Swap( other );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::SetMessage( const PrintRecordSection & other ) noexcept
{
	message.Clear();
	AppendMessage( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::SetMessage( const c32 * other_message_string, i64 other_size ) noexcept
{
	message.Clear();
	AppendMessage( other_message_string, other_size );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::AppendMessage( const PrintRecordSection& other ) noexcept
{
	if( other.message.Size() == 0 ) return;

	auto old_size = message.Size();
	message.Resize( old_size + other.message.Size() );
	std::copy( other.message.Data(), other.message.Data() + other.message.Size(), message.Data() + old_size );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::AppendMessage( const c32 * other_message_string, i64 other_size ) noexcept
{
	if( other_message_string == nullptr ) return;

	auto old_size = message.Size();
	message.Resize( old_size + other_size );
	std::copy( other_message_string, other_message_string + other_size, message.Data() + old_size );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto bc::diagnostic::PrintRecordSection::GetTheme() const noexcept -> PrintRecordTheme
{
	return theme;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::SetTheme( PrintRecordTheme new_theme ) noexcept
{
	theme = new_theme;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto bc::diagnostic::PrintRecordSection::GetMessage() const noexcept -> memory::MemoryRange<c32>
{
	return { message.Data(), message.Size() };
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::Clear() noexcept
{
	message.Clear();
	indent	= {};
	theme	= {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::Copy( const PrintRecordSection& other ) noexcept
{
	message.Resize( other.message.Size() );
	std::copy( other.message.Data(), other.message.Data() + other.message.Size(), message.Data() );
	indent = other.indent;
	theme = other.theme;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void bc::diagnostic::PrintRecordSection::Swap( PrintRecordSection& other ) noexcept
{
	std::swap( theme, other.theme );
	std::swap( message, other.message );
	std::swap( indent, other.indent );
}

