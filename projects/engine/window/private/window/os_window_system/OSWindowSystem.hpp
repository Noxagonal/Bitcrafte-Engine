#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <window/WindowComponentCreateInfo.hpp>

#include <window/window/WindowCreateInfo.hpp>

#include <core/containers/List.hpp>
#include <core/containers/UniquePtr.hpp>



namespace bc {
namespace window {



class WindowComponent;
class Window;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class OSWindowSystem
{
	friend class Window;
	friend class WindowComponent;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	OSWindowSystem(
		WindowComponent											&	window_component,
		const WindowComponentCreateInfo							&	window_component_create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~OSWindowSystem();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void													Run();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UniquePtr<Window>												CreateWindow(
		const WindowCreateInfo									&	window_create_info
	);

protected:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief
	/// Create window in derived class.
	///
	/// @return
	/// Created window.
	virtual UniquePtr<Window>										DoCreateWindow(
		const WindowCreateInfo									&	window_create_info
	) = 0;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void															NotifyWindowDestroyed(
		Window													*	window_ptr
	);

protected:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WindowComponent												&	window_component;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WindowComponentCreateInfo										window_component_create_info_copy;

	List<Window*>													active_window_list;
};



} // window
} // bc
