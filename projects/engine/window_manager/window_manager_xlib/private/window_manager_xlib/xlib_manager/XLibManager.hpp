#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <window_manager_xlib/window/XLibWindow.hpp>

#include <core/containers/Optional.hpp>
#include <core/containers/List.hpp>
#include <core/containers/UniquePtr.hpp>



namespace bc {
namespace window_manager {



struct WindowManagerComponentCreateInfo;
class WindowManagerXLibComponent;
class XLibManager;
class XLibWindow;

struct WindowCreateInfo;
class Window;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class XLibManager
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	XLibManager(
		WindowManagerXLibComponent&					window_manager_xlib_component,
		const WindowManagerComponentCreateInfo&		window_manager_component_create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~XLibManager();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void CleanupHandles();

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Run();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto CreateWindow( const WindowCreateInfo& window_create_info ) -> UniquePtr<Window>;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void NotifyWindowBeingDestroyed( XLibWindow* window_ptr );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetPlatformSpecificHandles() const -> const WindowManagerXLibPlatformHandles* { return &platform_handles; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ProcessMessages();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ProcessEvent( XEvent& event );

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// TODO: Change this to "Result<type>", result should be a type that holds an optional return value, and an error message.
	// For now, the text field is only used for error messages.
	auto PopulateX11Atoms() -> Optional<Text32>;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WindowManagerXLibComponent&			window_manager_xlib_component;

	List<XLibWindow*>					active_window_list;

	WindowManagerXLibPlatformHandles	platform_handles				= {};
};



} // window_manager
} // bc
