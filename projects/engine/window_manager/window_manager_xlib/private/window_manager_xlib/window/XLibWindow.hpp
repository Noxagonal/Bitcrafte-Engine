#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <window_manager/window/Window.hpp>
#include <window_manager/platform/handles/WindowPlatformHandles.hpp>
#include <window_manager_xlib/xlib_manager/XLibProperties.hpp>



namespace bc {
namespace window_manager {



class XLibManager;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class XLibWindow : public Window
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct X11PropertyHandles
	{
		xlib::PropertyHandle<XLibWindow*>					window_user_pointer;
		xlib::PropertyHandle<List<::Atom>>					window_protocols;
		xlib::PropertyHandle<Text>							window_title;
		xlib::PropertyHandle<Text>							window_icon_name;
		xlib::PropertyHandle<xlib::XSizeHints>				window_size_hints;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	XLibWindow(
		XLibManager										&	xlib_manager,
		const WindowCreateInfo							&	window_create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~XLibWindow() override;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													CleanupHandles();

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool											GetDecorated() override;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void											SetDecorated(
		bool												is_decorated
	) override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool											GetResizeable() override;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void											SetResizeable(
		bool												is_decorated
	) override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual const WindowManagerPlatformHandlesBase		*	GetPlatformSpecificHandles() const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	const WindowManagerXLibPlatformHandles				*	GetXLibPlatformHandles() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline X11PropertyHandles							*	GetX11PropertyHandles() { return &x11_property_handles; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													SetupPropertyHandles();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	XLibManager											&	xlib_manager;

	WindowManagerXLibPlatformHandles						platform_handles			= {};
	X11PropertyHandles										x11_property_handles		= {};
};



} // window_manager
} // bc
