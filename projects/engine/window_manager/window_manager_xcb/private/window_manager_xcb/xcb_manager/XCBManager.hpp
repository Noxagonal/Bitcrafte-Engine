#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <window_manager_xcb/window/XCBWindow.hpp>
#include <window_manager_xcb/xcb_manager/XCBProperties.hpp>

#include <core/containers/Optional.hpp>
#include <core/containers/List.hpp>
#include <core/containers/UniquePtr.hpp>



namespace bc {
namespace window_manager {



struct WindowManagerComponentCreateInfo;
class WindowManagerXCBComponent;
class XCBManager;
class XCBWindow;

struct WindowCreateInfo;
class Window;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class XCBManager
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	XCBManager(
		WindowManagerXCBComponent						&	window_manager_xcb_component,
		const WindowManagerComponentCreateInfo			&	window_manager_component_create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~XCBManager();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													CleanupHandles();

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													Run();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UniquePtr<Window>										CreateWindow(
		const WindowCreateInfo							&	window_create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													NotifyWindowBeingDestroyed(
		XCBWindow										*	window_ptr
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const WindowManagerXCBPlatformHandles		*	GetPlatformSpecificHandles() const { return &platform_handles; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													ProcessMessages();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													ProcessEvent(
	XEvent												&	event
	);

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// TODO: Change this to "Result<type>", result should be a type that holds an optional return value, and an error message.
	// For now, the text field is only used for error messages.
	Optional<Text32>										PopulateX11Atoms();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WindowManagerXCBComponent							&	window_manager_xcb_component;

	List<XCBWindow*>										active_window_list;

	WindowManagerXCBPlatformHandles							platform_handles = {};
};



} // window_manager
} // bc
