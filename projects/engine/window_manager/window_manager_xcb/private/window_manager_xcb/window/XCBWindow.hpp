#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <window_manager/window/Window.hpp>
#include <window_manager/platform/handles/WindowPlatformHandles.hpp>
#include <window_manager_xcb/xcb_manager/XCBProperties.hpp>



namespace bc {
namespace window_manager {



class XCBManager;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class XCBWindow : public Window
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct XCBPropertyHandles
	{
		xcb::PropertyHandle<XCBWindow*>						window_user_pointer;
		xcb::PropertyHandle<List<xcb_atom_t>>				window_protocols;
		xcb::PropertyHandle<Text>							window_title;
		xcb::PropertyHandle<Text>							window_icon_name;
		xcb::PropertyHandle<xcb::XSizeHints>				window_size_hints;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	XCBWindow(
		XCBManager										&	xcb_manager,
		const WindowCreateInfo							&	window_create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~XCBWindow() override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool											GetDecorated() override;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void											SetDecorated(
		bool												is_decorated
	) override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool											GetResizeable() override;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void											SetResizeable(
		bool												is_decorated
	) override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual const WindowManagerPlatformHandlesBase		*	GetPlatformSpecificHandles() const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	const WindowManagerXCBPlatformHandles				*	GetXCBPlatformHandles() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline XCBPropertyHandles							*	GetXCBPropertyHandles() { return &xcb_property_handles; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													SetupXCBPropertyHandles();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	XCBManager											&	xcb_manager;

	WindowManagerXCBPlatformHandles							platform_handles			= {};
	XCBPropertyHandles										xcb_property_handles		= {};
};



} // window_manager
} // bc
