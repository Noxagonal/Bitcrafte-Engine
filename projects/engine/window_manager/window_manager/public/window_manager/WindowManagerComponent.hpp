#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <window_manager/WindowManagerComponentCreateInfo.hpp>
#include <window_manager/event/WindowManagerComponentEvents.hpp>
#include <window_manager/platform/handles/WindowPlatformHandles.hpp>
#include <window_manager/window/Window.hpp>

#include <core/containers/UniquePtr.hpp>


namespace bc {
namespace window_manager {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class BITCRAFTE_ENGINE_API WindowManagerComponent
{
	friend class Window;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WindowManagerComponent( const WindowManagerComponentCreateInfo& create_info );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~WindowManagerComponent();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Run() = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto CreateWindow( const WindowCreateInfo& window_create_info ) -> UniquePtr<Window> = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto GetPlatformSpecificHandles() const -> const WindowManagerPlatformHandlesBase* = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WindowManagerComponentEvents	events;

private:
};



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
auto CreateWindowManagerComponent( const WindowManagerComponentCreateInfo& create_info ) -> UniquePtr<WindowManagerComponent>;



} // window
} // bc
