#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <window_manager/event/WindowEventEnums.hpp>

#include <core/containers/Text.hpp>
#include <core/math/Vector.hpp>

#include <core/event/Event.hpp>



namespace bc {
namespace window_manager {



class WindowEvents
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<List<Text>&>															FileDrop;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<>																		CloseRequested;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<math::Vec2i32>														PositionChanged;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<math::Vec2i32>														SizeChanged;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<bool>																	FocusChanged;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<WindowState>															StateChanged;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<MouseButton, MouseButtonAction, ModifierKeyFlags>						MouseButton;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<math::Vec2f64>														MousePosition;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<math::Vec2f64>														MouseScroll;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Event<bool>																	MouseEnter;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief		Use this for keyboard input for player control.
	/// 
	///				Keyboard input event returning individual key presses. Returns
	///				Keyboard button, scancode of the key, action of what happened
	///				with the key and modifier keys pressed down at the same time.
	Event<KeyboardButton, i32, KeyboardButtonAction, ModifierKeyFlags>			KeyboardKey;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief		Use this for keyboard text input.
	/// 
	///				Keyboard input event returning unicode characters. Returns
	///				unicode character.
	Event<c32>																	KeyboardCharacter;
};



} // window
} // bc
