#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <core/containers/UniquePtr.hpp>

#include <window_manager/WindowManagerComponent.hpp>



namespace bc {
namespace window_manager {



class WaylandManager;
class Window;
struct WindowCreateInfo;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class WindowManagerWaylandComponent : public WindowManagerComponent
{
	friend class Window;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WindowManagerWaylandComponent( const WindowManagerComponentCreateInfo& create_info );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~WindowManagerWaylandComponent();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Run() override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto CreateWindow( const WindowCreateInfo& window_create_info ) -> UniquePtr<Window> override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto GetPlatformSpecificHandles() const -> const WindowManagerPlatformHandlesBase* override;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UniquePtr<WaylandManager>	wayland_manager;
};



} // window
} // bc
