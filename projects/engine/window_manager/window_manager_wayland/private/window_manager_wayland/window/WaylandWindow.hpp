#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <window_manager/window/Window.hpp>
#include <window_manager/platform/handles/WindowPlatformHandles.hpp>



namespace bc {
namespace window_manager {



class WaylandManager;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class WaylandWindow : public Window
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WaylandWindow(
		WaylandManager&				wayland_manager,
		const WindowCreateInfo&		window_create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~WaylandWindow() override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto GetDecorated() const -> bool override;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void SetDecorated( bool is_decorated ) override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto GetResizeable() const -> bool override;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void SetResizeable( bool is_resizeable ) override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto GetPlatformSpecificHandles() const -> const WindowManagerPlatformHandlesBase* override;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void CreateWindowSurface();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void DestroyWindowSurface();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	WaylandManager&							wayland_manager;

	WindowManagerWaylandPlatformHandles		platform_handles	= {};
};



} // window_manager
} // bc
