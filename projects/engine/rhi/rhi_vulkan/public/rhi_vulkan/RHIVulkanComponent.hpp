#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <rhi/RHIComponent.hpp>

#include <core/containers/UniquePtr.hpp>



namespace bc {

namespace window_manager { class WindowManagerComponent; }

namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class RHIVulkanComponent : public RHIComponent
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RHIVulkanComponent(
		::bc::window_manager::WindowManagerComponent&	window_manager_component,
		const RHIComponentCreateInfo&					create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~RHIVulkanComponent() override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void Start( const RHIComponentStartInfo& rhi_start_info ) override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual auto GetGraphicsCardList() -> List<Text> override;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto GetPrimaryGraphicsCardIndex() -> i64 override;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static auto CreateRHIVulkanImpl(
		window_manager::WindowManagerComponent&		window_manager_component,
		const RHIComponentCreateInfo&				create_info
	) -> UniquePtr<RHIVulkanImpl>;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UniquePtr<RHIVulkanImpl>	rhi_vulkan_impl;
};



} // rhi
} // bc
