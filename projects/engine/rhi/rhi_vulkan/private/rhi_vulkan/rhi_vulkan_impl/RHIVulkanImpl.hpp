#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <rhi/RHIComponentCreateInfo.hpp>



namespace bc {
namespace rhi {



class VulkanInstance;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class RHIVulkanImpl
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct ApplicationInfo
	{
		ApplicationInfo(
			const RHIComponentCreateInfo					&	create_info
		);

		Text32													application_name					= {};
		utility::Version										application_version					= {};
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct DebugSettings
	{
		DebugSettings(
			const RHIComponentCreateInfo					&	create_info
		);

		bool													debug_enabled						= false;
		RHIDebugLevel											minimum_debug_level					= RHIDebugLevel::VERBOSE;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RHIVulkanImpl(
		const RHIComponentCreateInfo & create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~RHIVulkanImpl();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const VkAllocationCallbacks						*	GetMainThreadAllocationCallbacks() { return &main_thread_allocation_callbacks; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const ApplicationInfo							&	GetApplicationInfo() { return application_info; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const DebugSettings								&	GetDebugSettings() { return debug_settings; }

	inline VulkanInstance									&	GetVulkanInstance() { return *vulkan_instance; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static ApplicationInfo										CreateApplicationInfo(
		const RHIComponentCreateInfo						&	create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static DebugSettings										CreateDebugSettings(
		const RHIComponentCreateInfo						&	create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkAllocationCallbacks										main_thread_allocation_callbacks;
	ApplicationInfo												application_info;
	DebugSettings												debug_settings;

	UniquePtr<VulkanInstance>									vulkan_instance;
};



} // rhi
} // bc
