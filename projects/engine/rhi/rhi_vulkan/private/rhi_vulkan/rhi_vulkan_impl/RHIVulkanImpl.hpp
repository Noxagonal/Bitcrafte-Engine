#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <rhi/RHIComponentCreateInfo.hpp>

#include <core/event/Event.hpp>



namespace bc {

namespace window_manager {
class WindowManagerComponent;
class Window;
}

namespace rhi {



struct RHIComponentStartInfo;
class VulkanInstance;
class VulkanDevice;
class WindowContext;
class RHIMemoryPool;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class RHIVulkanImpl
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct ApplicationInfo
	{
		Text32													application_name					= {};
		utility::Version										application_version					= {};
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct DebugSettings
	{
		bool													debug_enabled						= false;
		RHIDebugLevel											minimum_debug_level					= RHIDebugLevel::VERBOSE;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RHIVulkanImpl(
		window_manager::WindowManagerComponent				&	window_manager_component,
		const RHIComponentCreateInfo						&	create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~RHIVulkanImpl();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void														Start(
		const RHIComponentStartInfo							&	rhi_start_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline RHIMemoryPool									&	GetRHIMemoryPool() { return *memory_pool; };

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	i64															GetBestPhysicalDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const VkAllocationCallbacks						*	GetMainThreadAllocationCallbacks() { return &main_thread_allocation_callbacks; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const ApplicationInfo							&	GetApplicationInfo() { return application_info; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const DebugSettings								&	GetDebugSettings() { return debug_settings; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline VulkanInstance									&	GetVulkanInstance() { return *vulkan_instance; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline VulkanDevice										&	GetVulkanDevice() { return *vulkan_device; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkAllocationCallbacks										main_thread_allocation_callbacks;
	ApplicationInfo												application_info;
	DebugSettings												debug_settings;

	UniquePtr<RHIMemoryPool>									memory_pool;

	window_manager::WindowManagerComponent					&	window_manager_component;

	UniquePtr<VulkanInstance>									vulkan_instance;
	UniquePtr<VulkanDevice>										vulkan_device;

	List<UniquePtr<WindowContext>>								window_context_list;

	Event<window_manager::Window*>								OnWindowCreated;
	Event<window_manager::Window*>								OnWindowBeingDestroyed;
};



} // rhi
} // bc
