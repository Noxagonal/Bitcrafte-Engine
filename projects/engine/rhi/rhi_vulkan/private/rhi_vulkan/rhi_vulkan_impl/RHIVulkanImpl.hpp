#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>
#include <rhi/RHIComponentCreateInfo.hpp>

#include <core/event/Event.hpp>



namespace bc {

namespace window_manager {
class WindowManagerComponent;
class Window;
}

namespace rhi {



struct RHIComponentStartInfo;
class VulkanInstance;
class VulkanDevice;
class WindowContext;
class RHIMemoryPool;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class RHIVulkanImpl
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct ApplicationInfo
	{
		Text32				application_name	= {};
		utility::Version	application_version	= {};
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct DebugSettings
	{
		bool			debug_enabled		= false;
		RHIDebugLevel	minimum_debug_level	= RHIDebugLevel::VERBOSE;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RHIVulkanImpl(
		window_manager::WindowManagerComponent&	window_manager_component,
		const RHIComponentCreateInfo&			create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~RHIVulkanImpl();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Start( const RHIComponentStartInfo& rhi_start_info );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetWindowManagerComponent() -> window_manager::WindowManagerComponent& { return window_manager_component; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetRHIMemoryPool() -> RHIMemoryPool& { return *memory_pool; };

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto GetBestPhysicalDevice() -> i64;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetMainThreadAllocationCallbacks() -> VkAllocationCallbacks* { return &main_thread_allocation_callbacks; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetApplicationInfo() -> const ApplicationInfo& { return application_info; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetDebugSettings() -> const DebugSettings& { return debug_settings; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetVulkanInstance() -> VulkanInstance& { return *vulkan_instance; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetVulkanDevice() -> VulkanDevice& { return *vulkan_device; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkAllocationCallbacks						main_thread_allocation_callbacks;
	ApplicationInfo								application_info;
	DebugSettings								debug_settings;

	UniquePtr<RHIMemoryPool>					memory_pool;

	window_manager::WindowManagerComponent&		window_manager_component;

	UniquePtr<VulkanInstance>					vulkan_instance;
	UniquePtr<VulkanDevice>						vulkan_device;

	List<UniquePtr<WindowContext>>				window_context_list;

	Event<window_manager::Window*>				OnWindowCreated;
	Event<window_manager::Window*>				OnWindowBeingDestroyed;
};



} // rhi
} // bc
