#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <rhi/render_pipeline/g_buffer/GBuffer.hpp>

#include <rhi_vulkan/vk/image/VulkanImage.hpp>

#include <core/containers/Optional.hpp>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanGBuffer : public GBuffer
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanGBuffer(
		RHIVulkanImpl											&	rhi_vulkan_impl,
		const GBufferCreateInfo									&	create_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanGBuffer();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline VulkanImage											&	GetImage() { return *image; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RHIVulkanImpl												&	rhi_vulkan_impl;

	Optional<VulkanImage>											image;
};




} // rhi
} // bc
