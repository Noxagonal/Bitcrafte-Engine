#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <core/containers/List.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanPhysicalDevice
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct QueueFamilyInfo
	{
		List<VkQueueFamilyProperties2>	queue_family_properties;
		List<bool>						can_present;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanPhysicalDevice(
		RHIVulkanImpl&		rhi_vulkan_impl,
		VkPhysicalDevice	vk_physical_device
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanPhysicalDevice( const VulkanPhysicalDevice& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanPhysicalDevice( VulkanPhysicalDevice&& other ) = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanPhysicalDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( const VulkanPhysicalDevice& other ) -> VulkanPhysicalDevice& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( VulkanPhysicalDevice&& other ) -> VulkanPhysicalDevice& = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetMemoryProperties() const -> const VkPhysicalDeviceMemoryProperties2& { return vk_memory_properties; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetProperties() const -> const VkPhysicalDeviceProperties2& { return vk_properties; }
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetFeatures() const -> const VkPhysicalDeviceFeatures2& { return vk_features; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetQueueFamilyProperties() const -> const QueueFamilyInfo& { return queue_family_properties; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline operator VkPhysicalDevice() const { return vk_physical_device; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto GetPhysicalDeviceQueuePresentationSupport( ListView<VkQueueFamilyProperties2> queue_family_properties ) const -> List<bool>;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPhysicalDevice					vk_physical_device			= VK_NULL_HANDLE;

	VkPhysicalDeviceMemoryProperties2	vk_memory_properties;
	VkPhysicalDeviceProperties2			vk_properties;
	VkPhysicalDeviceFeatures2			vk_features;
	QueueFamilyInfo						queue_family_properties;

	RHIVulkanImpl*						rhi_vulkan_impl;
};



} // rhi
} // bc
