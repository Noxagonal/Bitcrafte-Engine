#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <core/containers/List.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanPhysicalDevice
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct MemoryPropertiesInfo
	{
		MemoryPropertiesInfo(
			VkPhysicalDevice								vk_physical_device
		);

		VkPhysicalDeviceMemoryProperties2					memory_properties			= {};
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct PropertiesInfo
	{
		PropertiesInfo(
			VkPhysicalDevice								vk_physical_device
		);
		VkPhysicalDeviceProperties2							properties					= {};
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct QueueFamilyInfo
	{
		QueueFamilyInfo(
			VkQueueFamilyProperties2						queue_family_properties,
			bool											can_present
		);
		VkQueueFamilyProperties2							queue_family_properties		= {};
		bool												can_present					= {};
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanPhysicalDevice(
		RHIVulkanImpl									&	rhi_vulkan_impl,
		VkPhysicalDevice									vk_physical_device
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanPhysicalDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const MemoryPropertiesInfo					&	GetMemoryProperties() const { return memory_properties; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const PropertiesInfo							&	GetProperties() const { return properties; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const List<QueueFamilyInfo>					&	GetQueueFamilyPropertyList() const { return queue_family_property_list; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline operator VkPhysicalDevice() const { return vk_physical_device; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	List<QueueFamilyInfo>									FetchQueueFamilyPropertyList();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPhysicalDevice										vk_physical_device					= VK_NULL_HANDLE;

	MemoryPropertiesInfo									memory_properties;
	PropertiesInfo											properties;
	List<QueueFamilyInfo>									queue_family_property_list;

	RHIVulkanImpl										&	rhi_vulkan_impl;
};



} // rhi
} // bc
