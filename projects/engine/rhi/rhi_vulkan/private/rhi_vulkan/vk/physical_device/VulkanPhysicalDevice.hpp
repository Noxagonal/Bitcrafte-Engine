#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanPhysicalDevice
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanPhysicalDevice(
		RHIVulkanImpl									&	vulkan_implementation,
		VkPhysicalDevice									vk_physical_device
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanPhysicalDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const VkPhysicalDeviceMemoryProperties2		&	GetMemoryProperties() const { return memory_properties; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const VkPhysicalDeviceProperties2			&	GetProperties() const { return properties; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const List<VkQueueFamilyProperties2>			&	GetQueueFamilyPropertyList() const { return queue_family_property_list; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline operator VkPhysicalDevice() { return vk_physical_device; }

private:
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPhysicalDeviceMemoryProperties2						FetchMemoryProperties() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPhysicalDeviceProperties2								FetchProperties() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	List<VkQueueFamilyProperties2>							FetchQueueFamilyPropertyList();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPhysicalDevice										vk_physical_device					= VK_NULL_HANDLE;

	VkPhysicalDeviceMemoryProperties2						memory_properties					= {};
	VkPhysicalDeviceProperties2								properties							= {};
	List<VkQueueFamilyProperties2>							queue_family_property_list			= {};

	RHIVulkanImpl										&	vulkan_implementation;
};



} // rhi
} // bc
