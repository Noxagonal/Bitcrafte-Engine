#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;
class VulkanCommandPool;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanCommandBuffer
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanCommandBuffer(
		RHIVulkanImpl&		rhi_vulkan_impl,
		VulkanCommandPool&	vulkan_command_pool,
		bool				is_secondary
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanCommandBuffer( const VulkanCommandBuffer& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanCommandBuffer( VulkanCommandBuffer&& other ) = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanCommandBuffer();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( const VulkanCommandBuffer& other ) -> VulkanCommandBuffer& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( VulkanCommandBuffer&& other ) -> VulkanCommandBuffer& = default;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkCommandBuffer		vk_command_buffer		= VK_NULL_HANDLE;

	RHIVulkanImpl*		rhi_vulkan_impl;
	VulkanCommandPool*	vulkan_command_pool;
};



} // rhi
} // bc
