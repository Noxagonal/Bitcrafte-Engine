#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>



namespace bc {

namespace window_manager { class Window; }

namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanWindowSurface
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct Capabilities
	{
		VkSurfaceCapabilitiesKHR	vk_capabilities							= {};
		VkImageUsageFlags			vk_shared_present_supported_usage_flags	= {};
		VkBool32					physical_device_surface_support			= {};
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanWindowSurface(
		RHIVulkanImpl&				rhi_vulkan_impl,
		window_manager::Window*		window
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanWindowSurface( const VulkanWindowSurface& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanWindowSurface( VulkanWindowSurface&& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanWindowSurface();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( const VulkanWindowSurface& other ) -> VulkanWindowSurface& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( VulkanWindowSurface&& other ) -> VulkanWindowSurface& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetCapabilities() const -> const Capabilities& { return capabilities; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetSurfaceFormatList() const -> const List<VkSurfaceFormatKHR>& { return surface_format_list; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetPreferredSurfaceFormat() const -> VkSurfaceFormatKHR { return preferred_surface_format; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetPhysicalDeviceSurfaceSupport() const -> VkBool32 { return physical_device_surface_support; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline auto GetSupportForColorOutput() const -> VkBool32 { return supports_color_output; };

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline operator VkSurfaceKHR() { return vk_surface; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkSurfaceKHR				vk_surface						= VK_NULL_HANDLE;
	RHIVulkanImpl&				rhi_vulkan_impl;
	window_manager::Window*		window							= nullptr;

	Capabilities				capabilities					= {};
	List<VkSurfaceFormatKHR>	surface_format_list;
	VkSurfaceFormatKHR			preferred_surface_format		= {};
	VkBool32					physical_device_surface_support	= {};
	VkBool32					supports_color_output			= {};
};



} // rhi
} // bc
