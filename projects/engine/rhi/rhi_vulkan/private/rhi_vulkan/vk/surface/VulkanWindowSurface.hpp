#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>



namespace bc {

namespace window_manager { class Window; }

namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanWindowSurface
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct Capabilities
	{
		VkSurfaceCapabilitiesKHR						vk_capabilities							= {};
		VkImageUsageFlags								vk_shared_present_supported_usage_flags	= {};
		VkBool32										physical_device_surface_support			= {};
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanWindowSurface(
		RHIVulkanImpl								&	rhi_vulkan_impl,
		window_manager::Window						*	window
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanWindowSurface();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const Capabilities						&	GetCapabilities() const { return capabilities; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const List<VkSurfaceFormatKHR>			&	GetSurfaceFormatList() const { return surface_format_list; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline VkSurfaceFormatKHR							GetPreferredSurfaceFormat() const { return preferred_surface_format; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline VkBool32										GetPhysicalDeviceSurfaceSupport() const { return physical_device_surface_support; };
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline VkBool32										GetSupportForColorOutput() const { return supports_color_output; };

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkSurfaceKHR										vk_surface						= VK_NULL_HANDLE;
	RHIVulkanImpl									&	rhi_vulkan_impl;
	window_manager::Window							*	window							= nullptr;

	Capabilities										capabilities					= {};
	List<VkSurfaceFormatKHR>							surface_format_list;
	VkSurfaceFormatKHR									preferred_surface_format		= {};
	VkBool32											physical_device_surface_support	= {};
	VkBool32											supports_color_output			= {};
};



} // rhi
} // bc
