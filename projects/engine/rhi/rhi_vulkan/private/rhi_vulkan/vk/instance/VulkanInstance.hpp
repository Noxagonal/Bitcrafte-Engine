#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <core/containers/List.hpp>
#include <core/containers/Text.hpp>

#include <rhi_vulkan/vk/physical_device/VulkanPhysicalDevice.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanInstance
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanInstance(
		RHIVulkanImpl							&	rhi_vulkan_impl
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanInstance();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	const List<VulkanPhysicalDevice>			&	GetPhysicalDeviceList() const { return physical_devices; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline operator VkInstance() { return vk_instance; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	List<VulkanPhysicalDevice>						FetchPhysicalDevices() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RHIVulkanImpl								&	rhi_vulkan_impl;
	VkInstance										vk_instance						= nullptr;

	List<Text>										enabled_layer_names;
	List<Text>										enabled_extension_names;

	List<VulkanPhysicalDevice>						physical_devices;
};



} // rhi
} // bc
