#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <core/containers/List.hpp>
#include <core/containers/Text.hpp>

#include <rhi_vulkan/vk/physical_device/VulkanPhysicalDevice.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanInstance
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanInstance( RHIVulkanImpl& rhi_vulkan_impl );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanInstance( const VulkanInstance& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanInstance( VulkanInstance&& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanInstance();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( const VulkanInstance& other ) -> VulkanInstance& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( VulkanInstance&& other ) -> VulkanInstance& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto GetPhysicalDeviceList() -> List<VulkanPhysicalDevice>& { return physical_devices; }

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline operator VkInstance() { return vk_instance; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto FetchPhysicalDevices() const -> List<VulkanPhysicalDevice>;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RHIVulkanImpl&						rhi_vulkan_impl;
	VkInstance							vk_instance								= nullptr;

	List<Text>							enabled_layer_names;
	List<Text>							enabled_extension_names;

	List<VulkanPhysicalDevice>			physical_devices;

	PFN_vkCreateDebugUtilsMessengerEXT	vkCreateDebugUtilsMessengerEXT_func		= nullptr;
	PFN_vkDestroyDebugUtilsMessengerEXT	vkDestroyDebugUtilsMessengerEXT_func	= nullptr;
	VkDebugUtilsMessengerEXT			debug_utils_messenger					= VK_NULL_HANDLE;
};



} // rhi
} // bc
