#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanFence
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanFence(
		RHIVulkanImpl&	rhi_vulkan_impl,
		bool			initially_signaled
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanFence( const VulkanFence& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanFence( VulkanFence&& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanFence();
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( const VulkanFence& other ) -> VulkanFence& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( VulkanFence&& other ) noexcept -> VulkanFence&;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Clear();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Move( VulkanFence& other );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkFence			vk_fence			= VK_NULL_HANDLE;

	RHIVulkanImpl&	rhi_vulkan_impl;
};



} // rhi
} // bc
