#pragma once

#include <build_configuration/BuildConfigurationComponent.hpp>

#include <vulkan/vulkan.h>



namespace bc {
namespace rhi {



class RHIVulkanImpl;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class VulkanEvent
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanEvent( RHIVulkanImpl& rhi_vulkan_impl );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanEvent( const VulkanEvent& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VulkanEvent( VulkanEvent&& other ) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~VulkanEvent();
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( const VulkanEvent& other ) -> VulkanEvent& = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	auto operator=( VulkanEvent&& other ) noexcept -> VulkanEvent&;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Clear();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Move( VulkanEvent& other );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkEvent			vk_event			= VK_NULL_HANDLE;

	RHIVulkanImpl&	rhi_vulkan_impl;
};



} // rhi
} // bc
